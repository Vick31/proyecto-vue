import {
  __commonJS,
  __toESM
} from "./chunk-J43GMYXM.js";

// node_modules/easy-js-camera/lib/CameraModel.js
var require_CameraModel = __commonJS({
  "node_modules/easy-js-camera/lib/CameraModel.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var CameraModel = function CameraModel2(camera) {
      _classCallCheck(this, CameraModel2);
      this.id = camera.deviceId;
      this.label = camera.label;
    };
    exports.default = CameraModel;
  }
});

// node_modules/easy-js-camera/lib/Camera.js
var require_Camera = __commonJS({
  "node_modules/easy-js-camera/lib/Camera.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", {
      value: true
    });
    exports.Constraints = void 0;
    var _createClass = function() {
      function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
          var descriptor = props[i];
          descriptor.enumerable = descriptor.enumerable || false;
          descriptor.configurable = true;
          if ("value" in descriptor)
            descriptor.writable = true;
          Object.defineProperty(target, descriptor.key, descriptor);
        }
      }
      return function(Constructor, protoProps, staticProps) {
        if (protoProps)
          defineProperties(Constructor.prototype, protoProps);
        if (staticProps)
          defineProperties(Constructor, staticProps);
        return Constructor;
      };
    }();
    var _CameraModel = require_CameraModel();
    var _CameraModel2 = _interopRequireDefault(_CameraModel);
    function _interopRequireDefault(obj) {
      return obj && obj.__esModule ? obj : { default: obj };
    }
    function _classCallCheck(instance, Constructor) {
      if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
      }
    }
    var Constraints = exports.Constraints = function() {
      function Constraints2() {
        _classCallCheck(this, Constraints2);
        this.video = {
          facingMode: "user"
        };
        this.audio = false;
      }
      _createClass(Constraints2, [{
        key: "switchFacingMode",
        value: function switchFacingMode() {
          var tryAgain = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          if (this.video.facingMode === "user") {
            this.video.facingMode = "environment";
          } else if (tryAgain) {
            this.video.facingMode = {
              exact: "environment"
            };
          } else {
            this.video.facingMode = "user";
          }
          return this;
        }
      }, {
        key: "getConstraint",
        value: function getConstraint() {
          return {
            video: this.video,
            audio: this.audio
          };
        }
      }]);
      return Constraints2;
    }();
    var Camera2 = function() {
      function Camera3(video, canvas) {
        _classCallCheck(this, Camera3);
        this.devices = [];
        this.stream = null;
        this.canvasElement = canvas;
        this.videoElement = video;
        this.constraints = new Constraints();
      }
      _createClass(Camera3, [{
        key: "getDevices",
        value: function getDevices() {
          var _this = this;
          return new Promise(async function(resolve, reject) {
            if (_this.devices.length > 0) {
              resolve(_this.devices);
              return;
            }
            try {
              var devices = await navigator.mediaDevices.enumerateDevices();
              devices.forEach(function(device) {
                if (device.kind && device.kind.toLocaleLowerCase() === "videoinput")
                  _this.devices.push(new _CameraModel2.default(device));
              });
              resolve(_this.devices);
            } catch (error) {
              console.error("GetDevices", error);
              reject(error);
            }
          });
        }
      }, {
        key: "setVideoConstraints",
        value: function setVideoConstraints(videoConstraints) {
          if (!this.constraints) {
            this.constraints = new Constraints();
          }
          this.constraints.video = videoConstraints;
          return this;
        }
      }, {
        key: "snap",
        value: function snap2() {
          this.canvasElement.width = this.videoElement.videoWidth;
          this.canvasElement.height = this.videoElement.videoHeight;
          var context = this.canvasElement.getContext("2d");
          context.drawImage(this.videoElement, 0, 0, this.canvasElement.width, this.canvasElement.height);
          return this.canvasElement;
        }
      }, {
        key: "snapAsDataUrl",
        value: function snapAsDataUrl3() {
          this.snap();
          var data4 = this.canvasElement.toDataURL("image/png");
          return data4;
        }
      }, {
        key: "snapAsBlob",
        value: function snapAsBlob3() {
          var _this2 = this;
          this.snap();
          return new Promise(function(resolve) {
            _this2.canvasElement.toBlob(function(blob) {
              resolve(blob);
            }, "image/png", 1);
          });
        }
      }, {
        key: "start",
        value: function start4() {
          var _this3 = this;
          return new Promise(async function(resolve, reject) {
            try {
              await _this3.getDevices();
              var stream = await navigator.mediaDevices.getUserMedia(_this3.constraints.getConstraint());
              _this3.videoElement.srcObject = stream;
              _this3.stream = stream;
              resolve();
            } catch (error) {
              console.error("StartCamera", error);
              reject(error);
            }
          });
        }
      }, {
        key: "stop",
        value: function stop4() {
          if (!this.stream)
            return;
          var tracks = this.videoElement.srcObject.getTracks();
          tracks.forEach(function(track) {
            return track.stop();
          });
        }
      }, {
        key: "switch",
        value: function _switch() {
          var _this4 = this;
          var tryAgain = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : false;
          return new Promise(async function(resolve, reject) {
            _this4.constraints = _this4.constraints.switchFacingMode(tryAgain);
            _this4.stop();
            try {
              await _this4.start();
              resolve();
            } catch (error) {
              console.error("SwitchCamera", error);
              reject(error);
            }
          });
        }
      }], [{
        key: "isCameraSupported",
        value: function isCameraSupported() {
          return "mediaDevices" in navigator && "getUserMedia" in navigator.mediaDevices;
        }
      }, {
        key: "tryInvokePermission",
        value: function tryInvokePermission(video, canvas) {
          return new Promise(async function(resolve, reject) {
            try {
              await navigator.mediaDevices.getUserMedia(new Constraints());
              resolve(new Camera3(video, canvas));
            } catch (error) {
              console.error("MediaDevices", error);
              reject(error);
            }
          });
        }
      }]);
      return Camera3;
    }();
    exports.default = Camera2;
  }
});

// node_modules/easy-vue-camera/dist/EasyCamera.esm.js
import "C:/Users/SENA/Desktop/proyecto/proyecto-vue/node_modules/@mdi/font/css/materialdesignicons.css";

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto) || typeof msCrypto !== "undefined" && typeof msCrypto.getRandomValues === "function" && msCrypto.getRandomValues.bind(msCrypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/regex.js
var regex_default = /^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/validate.js
function validate(uuid) {
  return typeof uuid === "string" && regex_default.test(uuid);
}
var validate_default = validate;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).substr(1));
}
var i;
function stringify(arr) {
  var offset = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0;
  var uuid = (byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]]).toLowerCase();
  if (!validate_default(uuid)) {
    throw TypeError("Stringified UUID is invalid");
  }
  return uuid;
}
var stringify_default = stringify;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/parse.js
function parse(uuid) {
  if (!validate_default(uuid)) {
    throw TypeError("Invalid UUID");
  }
  var v;
  var arr = new Uint8Array(16);
  arr[0] = (v = parseInt(uuid.slice(0, 8), 16)) >>> 24;
  arr[1] = v >>> 16 & 255;
  arr[2] = v >>> 8 & 255;
  arr[3] = v & 255;
  arr[4] = (v = parseInt(uuid.slice(9, 13), 16)) >>> 8;
  arr[5] = v & 255;
  arr[6] = (v = parseInt(uuid.slice(14, 18), 16)) >>> 8;
  arr[7] = v & 255;
  arr[8] = (v = parseInt(uuid.slice(19, 23), 16)) >>> 8;
  arr[9] = v & 255;
  arr[10] = (v = parseInt(uuid.slice(24, 36), 16)) / 1099511627776 & 255;
  arr[11] = v / 4294967296 & 255;
  arr[12] = v >>> 24 & 255;
  arr[13] = v >>> 16 & 255;
  arr[14] = v >>> 8 & 255;
  arr[15] = v & 255;
  return arr;
}
var parse_default = parse;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/v35.js
function stringToBytes(str) {
  str = unescape(encodeURIComponent(str));
  var bytes = [];
  for (var i = 0; i < str.length; ++i) {
    bytes.push(str.charCodeAt(i));
  }
  return bytes;
}
var DNS = "6ba7b810-9dad-11d1-80b4-00c04fd430c8";
var URL = "6ba7b811-9dad-11d1-80b4-00c04fd430c8";
function v35_default(name, version, hashfunc) {
  function generateUUID(value, namespace, buf, offset) {
    if (typeof value === "string") {
      value = stringToBytes(value);
    }
    if (typeof namespace === "string") {
      namespace = parse_default(namespace);
    }
    if (namespace.length !== 16) {
      throw TypeError("Namespace must be array-like (16 iterable integer values, 0-255)");
    }
    var bytes = new Uint8Array(16 + value.length);
    bytes.set(namespace);
    bytes.set(value, namespace.length);
    bytes = hashfunc(bytes);
    bytes[6] = bytes[6] & 15 | version;
    bytes[8] = bytes[8] & 63 | 128;
    if (buf) {
      offset = offset || 0;
      for (var i = 0; i < 16; ++i) {
        buf[offset + i] = bytes[i];
      }
      return buf;
    }
    return stringify_default(bytes);
  }
  try {
    generateUUID.name = name;
  } catch (err) {
  }
  generateUUID.DNS = DNS;
  generateUUID.URL = URL;
  return generateUUID;
}

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/md5.js
function md5(bytes) {
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = new Uint8Array(msg.length);
    for (var i = 0; i < msg.length; ++i) {
      bytes[i] = msg.charCodeAt(i);
    }
  }
  return md5ToHexEncodedArray(wordsToMd5(bytesToWords(bytes), bytes.length * 8));
}
function md5ToHexEncodedArray(input) {
  var output = [];
  var length32 = input.length * 32;
  var hexTab = "0123456789abcdef";
  for (var i = 0; i < length32; i += 8) {
    var x = input[i >> 5] >>> i % 32 & 255;
    var hex = parseInt(hexTab.charAt(x >>> 4 & 15) + hexTab.charAt(x & 15), 16);
    output.push(hex);
  }
  return output;
}
function getOutputLength(inputLength8) {
  return (inputLength8 + 64 >>> 9 << 4) + 14 + 1;
}
function wordsToMd5(x, len) {
  x[len >> 5] |= 128 << len % 32;
  x[getOutputLength(len) - 1] = len;
  var a = 1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d = 271733878;
  for (var i = 0; i < x.length; i += 16) {
    var olda = a;
    var oldb = b;
    var oldc = c;
    var oldd = d;
    a = md5ff(a, b, c, d, x[i], 7, -680876936);
    d = md5ff(d, a, b, c, x[i + 1], 12, -389564586);
    c = md5ff(c, d, a, b, x[i + 2], 17, 606105819);
    b = md5ff(b, c, d, a, x[i + 3], 22, -1044525330);
    a = md5ff(a, b, c, d, x[i + 4], 7, -176418897);
    d = md5ff(d, a, b, c, x[i + 5], 12, 1200080426);
    c = md5ff(c, d, a, b, x[i + 6], 17, -1473231341);
    b = md5ff(b, c, d, a, x[i + 7], 22, -45705983);
    a = md5ff(a, b, c, d, x[i + 8], 7, 1770035416);
    d = md5ff(d, a, b, c, x[i + 9], 12, -1958414417);
    c = md5ff(c, d, a, b, x[i + 10], 17, -42063);
    b = md5ff(b, c, d, a, x[i + 11], 22, -1990404162);
    a = md5ff(a, b, c, d, x[i + 12], 7, 1804603682);
    d = md5ff(d, a, b, c, x[i + 13], 12, -40341101);
    c = md5ff(c, d, a, b, x[i + 14], 17, -1502002290);
    b = md5ff(b, c, d, a, x[i + 15], 22, 1236535329);
    a = md5gg(a, b, c, d, x[i + 1], 5, -165796510);
    d = md5gg(d, a, b, c, x[i + 6], 9, -1069501632);
    c = md5gg(c, d, a, b, x[i + 11], 14, 643717713);
    b = md5gg(b, c, d, a, x[i], 20, -373897302);
    a = md5gg(a, b, c, d, x[i + 5], 5, -701558691);
    d = md5gg(d, a, b, c, x[i + 10], 9, 38016083);
    c = md5gg(c, d, a, b, x[i + 15], 14, -660478335);
    b = md5gg(b, c, d, a, x[i + 4], 20, -405537848);
    a = md5gg(a, b, c, d, x[i + 9], 5, 568446438);
    d = md5gg(d, a, b, c, x[i + 14], 9, -1019803690);
    c = md5gg(c, d, a, b, x[i + 3], 14, -187363961);
    b = md5gg(b, c, d, a, x[i + 8], 20, 1163531501);
    a = md5gg(a, b, c, d, x[i + 13], 5, -1444681467);
    d = md5gg(d, a, b, c, x[i + 2], 9, -51403784);
    c = md5gg(c, d, a, b, x[i + 7], 14, 1735328473);
    b = md5gg(b, c, d, a, x[i + 12], 20, -1926607734);
    a = md5hh(a, b, c, d, x[i + 5], 4, -378558);
    d = md5hh(d, a, b, c, x[i + 8], 11, -2022574463);
    c = md5hh(c, d, a, b, x[i + 11], 16, 1839030562);
    b = md5hh(b, c, d, a, x[i + 14], 23, -35309556);
    a = md5hh(a, b, c, d, x[i + 1], 4, -1530992060);
    d = md5hh(d, a, b, c, x[i + 4], 11, 1272893353);
    c = md5hh(c, d, a, b, x[i + 7], 16, -155497632);
    b = md5hh(b, c, d, a, x[i + 10], 23, -1094730640);
    a = md5hh(a, b, c, d, x[i + 13], 4, 681279174);
    d = md5hh(d, a, b, c, x[i], 11, -358537222);
    c = md5hh(c, d, a, b, x[i + 3], 16, -722521979);
    b = md5hh(b, c, d, a, x[i + 6], 23, 76029189);
    a = md5hh(a, b, c, d, x[i + 9], 4, -640364487);
    d = md5hh(d, a, b, c, x[i + 12], 11, -421815835);
    c = md5hh(c, d, a, b, x[i + 15], 16, 530742520);
    b = md5hh(b, c, d, a, x[i + 2], 23, -995338651);
    a = md5ii(a, b, c, d, x[i], 6, -198630844);
    d = md5ii(d, a, b, c, x[i + 7], 10, 1126891415);
    c = md5ii(c, d, a, b, x[i + 14], 15, -1416354905);
    b = md5ii(b, c, d, a, x[i + 5], 21, -57434055);
    a = md5ii(a, b, c, d, x[i + 12], 6, 1700485571);
    d = md5ii(d, a, b, c, x[i + 3], 10, -1894986606);
    c = md5ii(c, d, a, b, x[i + 10], 15, -1051523);
    b = md5ii(b, c, d, a, x[i + 1], 21, -2054922799);
    a = md5ii(a, b, c, d, x[i + 8], 6, 1873313359);
    d = md5ii(d, a, b, c, x[i + 15], 10, -30611744);
    c = md5ii(c, d, a, b, x[i + 6], 15, -1560198380);
    b = md5ii(b, c, d, a, x[i + 13], 21, 1309151649);
    a = md5ii(a, b, c, d, x[i + 4], 6, -145523070);
    d = md5ii(d, a, b, c, x[i + 11], 10, -1120210379);
    c = md5ii(c, d, a, b, x[i + 2], 15, 718787259);
    b = md5ii(b, c, d, a, x[i + 9], 21, -343485551);
    a = safeAdd(a, olda);
    b = safeAdd(b, oldb);
    c = safeAdd(c, oldc);
    d = safeAdd(d, oldd);
  }
  return [a, b, c, d];
}
function bytesToWords(input) {
  if (input.length === 0) {
    return [];
  }
  var length8 = input.length * 8;
  var output = new Uint32Array(getOutputLength(length8));
  for (var i = 0; i < length8; i += 8) {
    output[i >> 5] |= (input[i / 8] & 255) << i % 32;
  }
  return output;
}
function safeAdd(x, y) {
  var lsw = (x & 65535) + (y & 65535);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return msw << 16 | lsw & 65535;
}
function bitRotateLeft(num, cnt) {
  return num << cnt | num >>> 32 - cnt;
}
function md5cmn(q, a, b, x, s, t) {
  return safeAdd(bitRotateLeft(safeAdd(safeAdd(a, q), safeAdd(x, t)), s), b);
}
function md5ff(a, b, c, d, x, s, t) {
  return md5cmn(b & c | ~b & d, a, b, x, s, t);
}
function md5gg(a, b, c, d, x, s, t) {
  return md5cmn(b & d | c & ~d, a, b, x, s, t);
}
function md5hh(a, b, c, d, x, s, t) {
  return md5cmn(b ^ c ^ d, a, b, x, s, t);
}
function md5ii(a, b, c, d, x, s, t) {
  return md5cmn(c ^ (b | ~d), a, b, x, s, t);
}
var md5_default = md5;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/v3.js
var v3 = v35_default("v3", 48, md5_default);

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  options = options || {};
  var rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (var i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return stringify_default(rnds);
}
var v4_default = v4;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/sha1.js
function f(s, x, y, z) {
  switch (s) {
    case 0:
      return x & y ^ ~x & z;
    case 1:
      return x ^ y ^ z;
    case 2:
      return x & y ^ x & z ^ y & z;
    case 3:
      return x ^ y ^ z;
  }
}
function ROTL(x, n) {
  return x << n | x >>> 32 - n;
}
function sha1(bytes) {
  var K = [1518500249, 1859775393, 2400959708, 3395469782];
  var H = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
  if (typeof bytes === "string") {
    var msg = unescape(encodeURIComponent(bytes));
    bytes = [];
    for (var i = 0; i < msg.length; ++i) {
      bytes.push(msg.charCodeAt(i));
    }
  } else if (!Array.isArray(bytes)) {
    bytes = Array.prototype.slice.call(bytes);
  }
  bytes.push(128);
  var l = bytes.length / 4 + 2;
  var N = Math.ceil(l / 16);
  var M = new Array(N);
  for (var _i = 0; _i < N; ++_i) {
    var arr = new Uint32Array(16);
    for (var j = 0; j < 16; ++j) {
      arr[j] = bytes[_i * 64 + j * 4] << 24 | bytes[_i * 64 + j * 4 + 1] << 16 | bytes[_i * 64 + j * 4 + 2] << 8 | bytes[_i * 64 + j * 4 + 3];
    }
    M[_i] = arr;
  }
  M[N - 1][14] = (bytes.length - 1) * 8 / Math.pow(2, 32);
  M[N - 1][14] = Math.floor(M[N - 1][14]);
  M[N - 1][15] = (bytes.length - 1) * 8 & 4294967295;
  for (var _i2 = 0; _i2 < N; ++_i2) {
    var W = new Uint32Array(80);
    for (var t = 0; t < 16; ++t) {
      W[t] = M[_i2][t];
    }
    for (var _t = 16; _t < 80; ++_t) {
      W[_t] = ROTL(W[_t - 3] ^ W[_t - 8] ^ W[_t - 14] ^ W[_t - 16], 1);
    }
    var a = H[0];
    var b = H[1];
    var c = H[2];
    var d = H[3];
    var e = H[4];
    for (var _t2 = 0; _t2 < 80; ++_t2) {
      var s = Math.floor(_t2 / 20);
      var T = ROTL(a, 5) + f(s, b, c, d) + e + K[s] + W[_t2] >>> 0;
      e = d;
      d = c;
      c = ROTL(b, 30) >>> 0;
      b = a;
      a = T;
    }
    H[0] = H[0] + a >>> 0;
    H[1] = H[1] + b >>> 0;
    H[2] = H[2] + c >>> 0;
    H[3] = H[3] + d >>> 0;
    H[4] = H[4] + e >>> 0;
  }
  return [H[0] >> 24 & 255, H[0] >> 16 & 255, H[0] >> 8 & 255, H[0] & 255, H[1] >> 24 & 255, H[1] >> 16 & 255, H[1] >> 8 & 255, H[1] & 255, H[2] >> 24 & 255, H[2] >> 16 & 255, H[2] >> 8 & 255, H[2] & 255, H[3] >> 24 & 255, H[3] >> 16 & 255, H[3] >> 8 & 255, H[3] & 255, H[4] >> 24 & 255, H[4] >> 16 & 255, H[4] >> 8 & 255, H[4] & 255];
}
var sha1_default = sha1;

// node_modules/easy-vue-camera/node_modules/uuid/dist/esm-browser/v5.js
var v5 = v35_default("v5", 80, sha1_default);

// node_modules/easy-vue-camera/dist/EasyCamera.esm.js
var import_easy_js_camera = __toESM(require_Camera());
var script = {
  computed: {
    hasHeader: function hasHeader() {
      return typeof this.$slots.header !== "undefined" && this.$slots.header !== null;
    },
    multiDevice: function multiDevice() {
      if (!this.camera) {
        return false;
      }
      return this.camera.devices.length > 1;
    }
  },
  data: function data() {
    return {
      camera: null,
      canvasElementId: "canvas-" + v4_default().replace(/-/g, ""),
      canvas: null,
      picture: null,
      pictureDataUrl: null,
      switching: false,
      video: null,
      videoElementId: "video-" + v4_default().replace(/-/g, ""),
      visibleMask: false
    };
  },
  methods: {
    approve: function approve() {
      this.$emit("input", this.picture);
      this.$emit("approve", this.picture);
    },
    close: function close() {
      this.stop();
      this.$emit("close");
    },
    snapAsBlob: function snapAsBlob() {
      var this$1 = this;
      if (!this.camera) {
        console.error("Camera not found to take a picture");
        return;
      }
      return new Promise(function(resolve) {
        this$1.camera.snapAsBlob().then(function(picture2) {
          this$1.picture = picture2;
          resolve(picture2);
        });
      });
    },
    snapAsDataUrl: function snapAsDataUrl() {
      if (!this.camera) {
        console.error("Camera not found to take a picture");
        return;
      }
      this.picture = this.camera.snapAsDataUrl();
      this.stop();
      if (!this.mustApprove) {
        this.$emit("input", this.picture);
      }
      return this.picture;
    },
    start: function start() {
      var this$1 = this;
      if (this.camera) {
        this.picture = null;
        this.$emit("input", null);
        this.$emit("loading", true);
        this.camera.start().finally(function() {
          return this$1.$emit("loading", false);
        });
        return;
      }
      this.video = document.getElementById(this.videoElementId);
      this.canvas = document.getElementById(this.canvasElementId);
      return new Promise(function(resolve) {
        import_easy_js_camera.default.tryInvokePermission(this$1.video, this$1.canvas).then(function(camera) {
          this$1.camera = camera;
          resolve(camera);
        });
      });
    },
    stop: function stop() {
      if (!this.camera) {
        return;
      }
      this.camera.stop();
    },
    switchCamera: function switchCamera(tryAgain) {
      var this$1 = this;
      if (tryAgain === void 0)
        tryAgain = false;
      if (this.switching && !tryAgain) {
        return;
      }
      if (!this.camera) {
        console.error("No camera found to switch...");
        return;
      }
      this.switching = true;
      return new Promise(function(resolve, reject) {
        this$1.camera.switch(tryAgain).then(function() {
          this$1.switching = false;
          resolve();
        }).catch(function() {
          if (!tryAgain) {
            this$1.switchCamera(true);
          } else {
            this$1.switching = false;
            reject();
          }
        });
      });
    }
  },
  mounted: function mounted() {
    if (this.startOnMounted) {
      this.$emit("loading", true);
      this.start().then(function(camera) {
        if (camera) {
          camera.start();
        }
      }).finally(this.$emit("loading", false));
    }
  },
  name: "fullscreen-view-camera",
  props: {
    fullscreenZIndex: Number,
    mustApprove: Boolean,
    overlayMask: String,
    startOnMounted: Boolean,
    visibleOverlay: Boolean
  },
  watch: {
    picture: function picture() {
      var this$1 = this;
      if (!this.picture) {
        this.pictureDataUrl = null;
      }
      if (!(this.picture instanceof Blob)) {
        this.pictureDataUrl = this.picture;
      } else {
        var reader = new FileReader();
        reader.readAsDataURL(this.picture);
        reader.onload = function() {
          this$1.pictureDataUrl = reader.result;
        };
      }
    }
  }
};
function normalizeComponent(template, style, script2, scopeId, isFunctionalTemplate, moduleIdentifier, shadowMode, createInjector2, createInjectorSSR, createInjectorShadow) {
  if (typeof shadowMode !== "boolean") {
    createInjectorSSR = createInjector2;
    createInjector2 = shadowMode;
    shadowMode = false;
  }
  var options = typeof script2 === "function" ? script2.options : script2;
  if (template && template.render) {
    options.render = template.render;
    options.staticRenderFns = template.staticRenderFns;
    options._compiled = true;
    if (isFunctionalTemplate) {
      options.functional = true;
    }
  }
  if (scopeId) {
    options._scopeId = scopeId;
  }
  var hook;
  if (moduleIdentifier) {
    hook = function(context) {
      context = context || this.$vnode && this.$vnode.ssrContext || this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext;
      if (!context && typeof __VUE_SSR_CONTEXT__ !== "undefined") {
        context = __VUE_SSR_CONTEXT__;
      }
      if (style) {
        style.call(this, createInjectorSSR(context));
      }
      if (context && context._registeredComponents) {
        context._registeredComponents.add(moduleIdentifier);
      }
    };
    options._ssrRegister = hook;
  } else if (style) {
    hook = shadowMode ? function(context) {
      style.call(this, createInjectorShadow(context, this.$root.$options.shadowRoot));
    } : function(context) {
      style.call(this, createInjector2(context));
    };
  }
  if (hook) {
    if (options.functional) {
      var originalRender = options.render;
      options.render = function renderWithStyleInjection(h, context) {
        hook.call(context);
        return originalRender(h, context);
      };
    } else {
      var existing = options.beforeCreate;
      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];
    }
  }
  return script2;
}
var isOldIE = typeof navigator !== "undefined" && /msie [6-9]\\b/.test(navigator.userAgent.toLowerCase());
function createInjector(context) {
  return function(id, style) {
    return addStyle(id, style);
  };
}
var HEAD;
var styles = {};
function addStyle(id, css) {
  var group = isOldIE ? css.media || "default" : id;
  var style = styles[group] || (styles[group] = { ids: /* @__PURE__ */ new Set(), styles: [] });
  if (!style.ids.has(id)) {
    style.ids.add(id);
    var code = css.source;
    if (css.map) {
      code += "\n/*# sourceURL=" + css.map.sources[0] + " */";
      code += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(css.map)))) + " */";
    }
    if (!style.element) {
      style.element = document.createElement("style");
      style.element.type = "text/css";
      if (css.media) {
        style.element.setAttribute("media", css.media);
      }
      if (HEAD === void 0) {
        HEAD = document.head || document.getElementsByTagName("head")[0];
      }
      HEAD.appendChild(style.element);
    }
    if ("styleSheet" in style.element) {
      style.styles.push(code);
      style.element.styleSheet.cssText = style.styles.filter(Boolean).join("\n");
    } else {
      var index = style.ids.size - 1;
      var textNode = document.createTextNode(code);
      var nodes = style.element.childNodes;
      if (nodes[index]) {
        style.element.removeChild(nodes[index]);
      }
      if (nodes.length) {
        style.element.insertBefore(textNode, nodes[index]);
      } else {
        style.element.appendChild(textNode);
      }
    }
  }
}
var __vue_script__ = script;
var __vue_render__ = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c(
    "div",
    {
      staticClass: "fullscreen-camera",
      style: { "z-index": _vm.fullscreenZIndex }
    },
    [
      _c("div", { staticClass: "camera-stack" }, [
        _c(
          "div",
          { staticClass: "camera-stack-header" },
          [
            _vm._t("header"),
            _vm._v(" "),
            !_vm.hasHeader ? _c(
              "a",
              {
                staticClass: "close-button",
                attrs: { role: "button" },
                on: { click: _vm.close }
              },
              [_vm._v("\xD7")]
            ) : _vm._e()
          ],
          2
        ),
        _vm._v(" "),
        _c(
          "div",
          {
            directives: [
              {
                name: "show",
                rawName: "v-show",
                value: !_vm.picture,
                expression: "!picture"
              }
            ],
            staticClass: "video-wrapper"
          },
          [
            _c("video", {
              attrs: { id: _vm.videoElementId, autoplay: "", playsinline: "" }
            }),
            _vm._v(" "),
            _c(
              "div",
              {
                staticClass: "overlay-mask",
                class: { "visible-overlay": _vm.visibleOverlay }
              },
              [
                _vm.visibleMask ? _c("img", { attrs: { src: _vm.overlayMask } }) : _vm._e()
              ]
            )
          ]
        ),
        _vm._v(" "),
        _c("canvas", {
          staticStyle: { display: "none" },
          attrs: { id: _vm.canvasElementId }
        }),
        _vm._v(" "),
        _c("div", {
          directives: [
            {
              name: "show",
              rawName: "v-show",
              value: _vm.picture,
              expression: "picture"
            }
          ],
          staticClass: "camera-snap",
          style: { "background-image": "url(" + _vm.pictureDataUrl + ")" }
        }),
        _vm._v(" "),
        _c(
          "div",
          {
            staticClass: "camera-stack-controls",
            class: { background: !!_vm.picture }
          },
          [
            _c("div", { staticClass: "camera-stack-controls-wrapper" }, [
              _c("div", { staticClass: "control-slot" }, [
                _vm.overlayMask && !_vm.picture ? _c(
                  "a",
                  {
                    staticClass: "secondary-button",
                    attrs: { role: "button" },
                    on: {
                      click: function($event) {
                        _vm.visibleMask = !_vm.visibleMask;
                      }
                    }
                  },
                  [_c("i", { staticClass: "mdi mdi-grid-large" })]
                ) : _vm._e()
              ]),
              _vm._v(" "),
              _c("div", { staticClass: "control-slot" }, [
                !_vm.picture ? _c(
                  "a",
                  {
                    attrs: { role: "button" },
                    on: {
                      click: function($event) {
                        return _vm.$emit("snap");
                      }
                    }
                  },
                  [_c("i", { staticClass: "mdi mdi-circle" })]
                ) : _vm._e(),
                _vm._v(" "),
                _vm.picture && _vm.mustApprove ? _c(
                  "a",
                  { attrs: { role: "button" }, on: { click: _vm.approve } },
                  [_c("i", { staticClass: "mdi mdi-check" })]
                ) : _vm._e()
              ]),
              _vm._v(" "),
              _c("div", { staticClass: "control-slot" }, [
                _vm.multiDevice && !_vm.picture ? _c(
                  "a",
                  {
                    staticClass: "secondary-button",
                    attrs: { disabled: _vm.switching, role: "button" },
                    on: {
                      click: function($event) {
                        return _vm.switchCamera(false);
                      }
                    }
                  },
                  [_c("i", { staticClass: "mdi mdi-camera-switch" })]
                ) : _vm._e(),
                _vm._v(" "),
                _vm.picture ? _c(
                  "a",
                  {
                    staticClass: "secondary-button",
                    attrs: { role: "button" },
                    on: { click: _vm.start }
                  },
                  [
                    _c("i", {
                      staticClass: "mdi mdi-camera-retake-outline"
                    })
                  ]
                ) : _vm._e()
              ])
            ])
          ]
        )
      ])
    ]
  );
};
var __vue_staticRenderFns__ = [];
__vue_render__._withStripped = true;
var __vue_inject_styles__ = function(inject) {
  if (!inject) {
    return;
  }
  inject("data-v-36306e52_0", { source: ".fullscreen-camera[data-v-36306e52] {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack[data-v-36306e52] {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack .camera-stack-header a.close-button[data-v-36306e52] {\n  position: fixed;\n  top: 5px;\n  right: 15px;\n  color: #fff;\n  font-family: Roboto, Tahoma;\n  font-size: 2.5rem;\n  line-height: 40px;\n  font-weight: 300 !important;\n  z-index: 100;\n}\n.fullscreen-camera .camera-stack .video-wrapper[data-v-36306e52] {\n  height: 100%;\n  width: 100%;\n  align-self: stretch;\n  align-items: center;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n.fullscreen-camera .camera-stack .video-wrapper video[data-v-36306e52] {\n  object-fit: cover;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask[data-v-36306e52] {\n  max-width: 50vh;\n  max-height: 50vh;\n  width: 100%;\n  height: 100%;\n  margin-top: 10vh;\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask.visible-overlay[data-v-36306e52] {\n  box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, 0.8);\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask img[data-v-36306e52] {\n  width: 100%;\n}\n.fullscreen-camera .camera-stack .camera-snap[data-v-36306e52] {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  width: 100%;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls[data-v-36306e52] {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: fixed;\n  bottom: 0;\n  padding: 5vh 0px;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls.background[data-v-36306e52] {\n  background-color: rgba(0, 0, 0, 0.8) !important;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper[data-v-36306e52] {\n  max-width: 500px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot[data-v-36306e52] {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0.8;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a[data-v-36306e52] {\n  color: #fff;\n  border-radius: 100%;\n  font-size: 35pt;\n  padding: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 0px 1px 2px #fff;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a i[data-v-36306e52]:before {\n  display: block !important;\n  line-height: normal !important;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a.secondary-button[data-v-36306e52] {\n  font-size: 15pt;\n  padding: 10px;\n}\n\n/*# sourceMappingURL=FullscreenViewCamera.vue.map */", map: { "version": 3, "sources": ["D:\\Projects\\easy-vue-camera\\src\\components\\FullscreenViewCamera.vue", "FullscreenViewCamera.vue"], "names": [], "mappings": "AAgMA;EACA,eAAA;EACA,OAAA;EACA,MAAA;EACA,WAAA;EACA,YAAA;AC/LA;ADgMA;EACA,aAAA;EACA,sBAAA;EACA,kBAAA;EACA,YAAA;AC9LA;ADiMA;EACA,eAAA;EACA,QAAA;EACA,WAAA;EACA,WAAA;EACA,2BAAA;EACA,iBAAA;EACA,iBAAA;EACA,2BAAA;EACA,YAAA;AC/LA;ADmMA;EACA,YAAA;EACA,WAAA;EACA,mBAAA;EACA,mBAAA;EACA,kBAAA;EACA,aAAA;EACA,sBAAA;ACjMA;ADkMA;EACA,iBAAA;EACA,kBAAA;EACA,WAAA;EACA,YAAA;EACA,WAAA;AChMA;ADkMA;EACA,eAAA;EACA,gBAAA;EACA,WAAA;EACA,YAAA;EACA,gBAAA;AChMA;ADiMA;EACA,oDAAA;AC/LA;ADiMA;EACA,WAAA;AC/LA;ADmMA;EACA,4BAAA;EACA,2BAAA;EACA,sBAAA;EACA,WAAA;EACA,YAAA;ACjMA;ADmMA;EACA,WAAA;EACA,aAAA;EACA,mBAAA;EACA,eAAA;EACA,SAAA;EACA,gBAAA;ACjMA;ADkMA;EACA,+CAAA;AChMA;ADkMA;EACA,gBAAA;EACA,WAAA;EACA,aAAA;EACA,mBAAA;EACA,cAAA;AChMA;ADiMA;EACA,WAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,YAAA;AC/LA;ADgMA;EACA,WAAA;EACA,mBAAA;EACA,eAAA;EACA,YAAA;EACA,aAAA;EACA,mBAAA;EACA,uBAAA;EACA,gCAAA;AC9LA;ADgMA;EACA,yBAAA;EACA,8BAAA;AC9LA;ADiMA;EACA,eAAA;EACA,aAAA;AC/LA;;AAEA,mDAAmD", "file": "FullscreenViewCamera.vue", "sourcesContent": [`<template>\r
    <div :style="{'z-index': fullscreenZIndex}" class="fullscreen-camera">\r
        <div class="camera-stack">\r
            <div class="camera-stack-header">\r
                <slot name="header"></slot>\r
                <a  @click="close"\r
                    class="close-button"\r
                    role="button"\r
                    v-if="!hasHeader">&times;</a>\r
            </div>\r
            <div class="video-wrapper" v-show="!picture">\r
                <video :id="videoElementId" autoplay playsinline></video>\r
                <div :class="{'visible-overlay': visibleOverlay}" class="overlay-mask">\r
                    <img :src="overlayMask" v-if="visibleMask">\r
                </div>\r
            </div>\r
            <canvas :id="canvasElementId" style="display: none"></canvas>\r
            <div :style="{'background-image' : \`url(\${pictureDataUrl})\`}" class="camera-snap" v-show="picture"></div>\r
            <div :class="{'background': !!picture}" class="camera-stack-controls">\r
                <div class="camera-stack-controls-wrapper">\r
                    <div class="control-slot">\r
                        <a @click="visibleMask = !visibleMask" class="secondary-button" role="button" v-if="overlayMask && !picture"><i class="mdi mdi-grid-large"></i></a>\r
                    </div>\r
                    <div class="control-slot">\r
                        <a @click="$emit('snap')" role="button" v-if="!picture"><i class="mdi mdi-circle"></i></a>\r
                        <a @click="approve" role="button" v-if="picture && mustApprove"><i class="mdi mdi-check"></i></a>\r
                    </div>\r
                    <div class="control-slot">\r
                        <a @click="switchCamera(false)" \r
                            :disabled="switching" \r
                            class="secondary-button" \r
                            role="button" \r
                            v-if="multiDevice && !picture"><i class="mdi mdi-camera-switch"></i></a>\r
                        <a @click="start"\r
                            class="secondary-button"\r
                            role="button"\r
                            v-if="picture"><i class="mdi mdi-camera-retake-outline"></i></a>\r
                    </div>\r
                </div>\r
            </div>\r
        </div>\r
    </div>\r
</template>\r
\r
<script>\r
import { v4 as uuid4 } from 'uuid';\r
import Camera from 'easy-js-camera';\r
\r
export default {\r
    computed: {\r
        hasHeader() {\r
            return typeof this.$slots.header !== 'undefined' && this.$slots.header !== null;\r
        },\r
        multiDevice() {\r
            if(!this.camera) return false;\r
            return this.camera.devices.length > 1;\r
        }\r
    },\r
    data() {\r
        return {\r
            camera: null,\r
            canvasElementId: \`canvas-\${uuid4().replace(/-/g, '')}\`,\r
            canvas: null,\r
            picture: null,\r
            pictureDataUrl: null,\r
            switching: false,\r
            video: null,\r
            videoElementId: \`video-\${uuid4().replace(/-/g, '')}\`,\r
            visibleMask: false,\r
        }\r
    },\r
    methods: {\r
        approve() {\r
            this.$emit('input', this.picture);\r
            this.$emit('approve', this.picture);\r
        },\r
        close() {\r
            this.stop();\r
            this.$emit('close');\r
        },\r
        snapAsBlob() {\r
            if(!this.camera) {\r
                console.error('Camera not found to take a picture');\r
                return;\r
            }            \r
            return new Promise(resolve => {\r
                this.camera.snapAsBlob()\r
                    .then(picture => {\r
                        this.picture = picture;\r
                        resolve(picture);\r
                    });\r
            });\r
        }, \r
        snapAsDataUrl() {\r
            if(!this.camera) {\r
                console.error('Camera not found to take a picture');\r
                return;\r
            }\r
            this.picture = this.camera.snapAsDataUrl();\r
            this.stop();\r
            if(!this.mustApprove) {\r
                this.$emit('input', this.picture);\r
            }\r
            return this.picture;\r
        },\r
        start() {\r
            if(this.camera) {\r
                this.picture = null;\r
                this.$emit('input', null);\r
                this.$emit('loading', true);\r
                this.camera.start()\r
                    .finally(() => this.$emit('loading', false));\r
                return;\r
            }\r
            this.video = document.getElementById(this.videoElementId);\r
            this.canvas = document.getElementById(this.canvasElementId);\r
            return new Promise(resolve => {\r
                Camera.tryInvokePermission(this.video, this.canvas)\r
                    .then(camera => {\r
                        this.camera = camera;\r
                        resolve(camera);\r
                    });\r
            });\r
        },\r
        stop() {\r
            if(!this.camera) {\r
                return;\r
            }\r
            this.camera.stop();\r
        },\r
        switchCamera(tryAgain = false) {\r
            if(this.switching && !tryAgain) return;\r
            if(!this.camera) {\r
                console.error('No camera found to switch...');\r
                return;\r
            }\r
            this.switching = true;\r
            return new Promise((resolve, reject) => {\r
                this.camera.switch(tryAgain)\r
                    .then(() => {\r
                        this.switching = false;\r
                        resolve();\r
                    })\r
                    .catch(() => {\r
                        if(!tryAgain) {\r
                            this.switchCamera(true);\r
                        } else {\r
                            this.switching = false;\r
                            reject();\r
                        }\r
                    })\r
            });\r
        }\r
    },\r
    mounted() {\r
        if(this.startOnMounted) {\r
            this.$emit('loading', true);\r
            this.start()\r
                .then(camera => {\r
                    if(camera) {\r
                        camera.start();\r
                    }\r
                })\r
                .finally(this.$emit('loading', false));\r
        }\r
    },\r
    name: 'fullscreen-view-camera',\r
    props: {\r
        fullscreenZIndex: Number,\r
        mustApprove: Boolean,\r
        overlayMask: String,\r
        startOnMounted: Boolean,\r
        visibleOverlay: Boolean,\r
    },\r
    watch: {\r
        picture() {\r
            if(!this.picture) this.pictureDataUrl = null;\r
            if(!(this.picture instanceof Blob)) {\r
                this.pictureDataUrl = this.picture;\r
            } else {\r
                var reader = new FileReader();\r
                reader.readAsDataURL(this.picture);\r
                reader.onload = () => {\r
                    this.pictureDataUrl = reader.result;\r
                }\r
            }\r
        }\r
    }\r
}\r
<\/script>\r
\r
<style lang="scss" scoped>\r
.fullscreen-camera {\r
    position: fixed;\r
    left: 0;\r
    top: 0;\r
    width: 100%;\r
    height: 100%;\r
    .camera-stack {\r
        display: flex;\r
        flex-direction: column;\r
        position: relative;\r
        height: 100%;\r
        .camera-stack-header {\r
            a {\r
                &.close-button {\r
                    position: fixed;\r
                    top: 5px;\r
                    right: 15px;\r
                    color: #fff;\r
                    font-family: Roboto, Tahoma;\r
                    font-size: 2.5rem;\r
                    line-height: 40px;\r
                    font-weight: 300 !important;\r
                    z-index: 100;\r
                }\r
            }\r
        }\r
        .video-wrapper {\r
            height: 100%;\r
            width: 100%;\r
            align-self: stretch;\r
            align-items: center;\r
            position: relative;\r
            display: flex;\r
            flex-direction: column;\r
            video {\r
                object-fit: cover;\r
                position: absolute;\r
                width: 100%;\r
                height: 100%;\r
                z-index: -1;\r
            }\r
            .overlay-mask {\r
                max-width: 50vh;\r
                max-height: 50vh;\r
                width: 100%;\r
                height: 100%;\r
                margin-top: 10vh;\r
                &.visible-overlay {\r
                    box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, .8);\r
                }\r
                img {\r
                    width: 100%;\r
                }\r
            }\r
        }\r
        .camera-snap {\r
            background-repeat: no-repeat;\r
            background-position: center;\r
            background-size: cover;\r
            width: 100%;\r
            height: 100%;\r
        }\r
        .camera-stack-controls {\r
            width: 100%;\r
            display: flex;\r
            align-items: center;\r
            position: fixed;\r
            bottom: 0;\r
            padding: 5vh 0px;\r
            &.background {\r
                background-color: rgba(0, 0, 0, .8) !important;\r
            }\r
            .camera-stack-controls-wrapper {\r
                max-width: 500px;\r
                width: 100%;\r
                display: flex;\r
                align-items: center;\r
                margin: 0 auto;\r
                .control-slot {\r
                    width: 100%;\r
                    height: 100%;\r
                    display: flex;\r
                    align-items: center;\r
                    justify-content: center;\r
                    opacity: .8;\r
                    a {\r
                        color: #fff;\r
                        border-radius: 100%;\r
                        font-size: 35pt;\r
                        padding: 8px;\r
                        display: flex;\r
                        align-items: center;\r
                        justify-content: center;\r
                        box-shadow: 0px 0px 1px 2px #fff;\r
                        i {\r
                            &:before {\r
                                display: block !important;\r
                                line-height: normal !important;\r
                            }\r
                        }\r
                        &.secondary-button {\r
                            font-size: 15pt;\r
                            padding: 10px;\r
                        }\r
                    }\r
                }\r
            }\r
        }\r
    }\r
}\r
</style>`, ".fullscreen-camera {\n  position: fixed;\n  left: 0;\n  top: 0;\n  width: 100%;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack {\n  display: flex;\n  flex-direction: column;\n  position: relative;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack .camera-stack-header a.close-button {\n  position: fixed;\n  top: 5px;\n  right: 15px;\n  color: #fff;\n  font-family: Roboto, Tahoma;\n  font-size: 2.5rem;\n  line-height: 40px;\n  font-weight: 300 !important;\n  z-index: 100;\n}\n.fullscreen-camera .camera-stack .video-wrapper {\n  height: 100%;\n  width: 100%;\n  align-self: stretch;\n  align-items: center;\n  position: relative;\n  display: flex;\n  flex-direction: column;\n}\n.fullscreen-camera .camera-stack .video-wrapper video {\n  object-fit: cover;\n  position: absolute;\n  width: 100%;\n  height: 100%;\n  z-index: -1;\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask {\n  max-width: 50vh;\n  max-height: 50vh;\n  width: 100%;\n  height: 100%;\n  margin-top: 10vh;\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask.visible-overlay {\n  box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, 0.8);\n}\n.fullscreen-camera .camera-stack .video-wrapper .overlay-mask img {\n  width: 100%;\n}\n.fullscreen-camera .camera-stack .camera-snap {\n  background-repeat: no-repeat;\n  background-position: center;\n  background-size: cover;\n  width: 100%;\n  height: 100%;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls {\n  width: 100%;\n  display: flex;\n  align-items: center;\n  position: fixed;\n  bottom: 0;\n  padding: 5vh 0px;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls.background {\n  background-color: rgba(0, 0, 0, 0.8) !important;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper {\n  max-width: 500px;\n  width: 100%;\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot {\n  width: 100%;\n  height: 100%;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  opacity: 0.8;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a {\n  color: #fff;\n  border-radius: 100%;\n  font-size: 35pt;\n  padding: 8px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  box-shadow: 0px 0px 1px 2px #fff;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a i:before {\n  display: block !important;\n  line-height: normal !important;\n}\n.fullscreen-camera .camera-stack .camera-stack-controls .camera-stack-controls-wrapper .control-slot a.secondary-button {\n  font-size: 15pt;\n  padding: 10px;\n}\n\n/*# sourceMappingURL=FullscreenViewCamera.vue.map */"] }, media: void 0 });
};
var __vue_scope_id__ = "data-v-36306e52";
var __vue_module_identifier__ = void 0;
var __vue_is_functional_template__ = false;
var __vue_component__ = normalizeComponent(
  { render: __vue_render__, staticRenderFns: __vue_staticRenderFns__ },
  __vue_inject_styles__,
  __vue_script__,
  __vue_scope_id__,
  __vue_is_functional_template__,
  __vue_module_identifier__,
  false,
  createInjector,
  void 0,
  void 0
);
var script$1 = {
  data: function data2() {
    return {
      camera: null,
      canvasElementId: "canvas-" + v4_default().replace(/-/g, ""),
      canvas: null,
      picture: null,
      switching: false,
      video: null,
      videoElementId: "video-" + v4_default().replace(/-/g, ""),
      visibleMask: false
    };
  },
  methods: {
    snapAsBlob: function snapAsBlob2() {
      var this$1 = this;
      if (!this.camera) {
        console.error("Camera not found to take a picture");
        return;
      }
      return new Promise(function(resolve) {
        this$1.camera.snapAsBlob().then(function(picture2) {
          this$1.picture = picture2;
          resolve(picture2);
        });
      });
    },
    snapAsDataUrl: function snapAsDataUrl2() {
      if (!this.camera) {
        console.error("Camera not found to take a picture");
        return;
      }
      this.picture = this.camera.snapAsDataUrl();
      this.stop();
      return this.picture;
    },
    start: function start2() {
      var this$1 = this;
      if (this.camera) {
        this.picture = null;
        this.$emit("loading", true);
        this.camera.start().finally(function() {
          return this$1.$emit("loading", false);
        });
        return;
      }
      this.video = document.getElementById(this.videoElementId);
      this.canvas = document.getElementById(this.canvasElementId);
      return new Promise(function(resolve) {
        import_easy_js_camera.default.tryInvokePermission(this$1.video, this$1.canvas).then(function(camera) {
          this$1.camera = camera;
          resolve(camera);
        });
      });
    },
    stop: function stop2() {
      if (!this.camera) {
        return;
      }
      this.camera.stop();
    },
    switchCamera: function switchCamera2(tryAgain) {
      var this$1 = this;
      if (tryAgain === void 0)
        tryAgain = false;
      if (this.switching && !tryAgain) {
        return;
      }
      if (!this.camera) {
        console.error("No camera found to switch...");
        return;
      }
      this.switching = true;
      return new Promise(function(resolve, reject) {
        this$1.camera.switch(tryAgain).then(function() {
          this$1.switching = false;
          resolve();
        }).catch(function() {
          if (!tryAgain) {
            this$1.switchCamera(true);
          } else {
            this$1.switching = false;
            reject();
          }
        });
      });
    },
    toggleMask: function toggleMask() {
      this.visibleMask = !this.visibleMask;
    }
  },
  mounted: function mounted2() {
    if (this.startOnMounted) {
      this.$emit("loading", true);
      this.start().then(function(camera) {
        if (camera) {
          camera.start();
        }
      }).finally(this.$emit("loading", false));
    }
  },
  name: "standard-view-camera",
  props: {
    overlayMask: String,
    startOnMounted: Boolean,
    visibleOverlay: Boolean
  }
};
var __vue_script__$1 = script$1;
var __vue_render__$1 = function() {
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _c("div", { staticClass: "video-wrapper" }, [
    _c("video", {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: !_vm.picture,
          expression: "!picture"
        }
      ],
      attrs: { id: _vm.videoElementId, autoplay: "", playsinline: "" }
    }),
    _vm._v(" "),
    _c("canvas", {
      directives: [
        {
          name: "show",
          rawName: "v-show",
          value: _vm.picture,
          expression: "picture"
        }
      ],
      attrs: { id: _vm.canvasElementId }
    }),
    _vm._v(" "),
    _c(
      "div",
      {
        staticClass: "overlay",
        class: { "visible-overlay": _vm.visibleOverlay }
      },
      [
        _vm.visibleMask ? _c("img", { attrs: { src: _vm.overlayMask } }) : _vm._e()
      ]
    )
  ]);
};
var __vue_staticRenderFns__$1 = [];
__vue_render__$1._withStripped = true;
var __vue_inject_styles__$1 = function(inject) {
  if (!inject) {
    return;
  }
  inject("data-v-17eb9e5b_0", { source: ".video-wrapper[data-v-17eb9e5b] {\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n.video-wrapper video[data-v-17eb9e5b] {\n  width: 100%;\n  height: auto;\n}\n.video-wrapper canvas[data-v-17eb9e5b] {\n  width: 100%;\n  height: auto;\n}\n.video-wrapper .overlay[data-v-17eb9e5b] {\n  position: absolute;\n  left: 100%;\n  transform: translateX(-50%);\n  height: 100%;\n  width: auto;\n  display: flex;\n}\n.video-wrapper .overlay.visible-overlay[data-v-17eb9e5b] {\n  box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, 0.8);\n}\n.video-wrapper .overlay img[data-v-17eb9e5b] {\n  height: auto;\n}\n\n/*# sourceMappingURL=StandardViewCamera.vue.map */", map: { "version": 3, "sources": ["D:\\Projects\\easy-vue-camera\\src\\components\\StandardViewCamera.vue", "StandardViewCamera.vue"], "names": [], "mappings": "AA0HA;EACA,gBAAA;EACA,aAAA;EACA,mBAAA;EACA,kBAAA;ACzHA;AD0HA;EACA,WAAA;EACA,YAAA;ACxHA;AD0HA;EACA,WAAA;EACA,YAAA;ACxHA;AD0HA;EACA,kBAAA;EACA,UAAA;EACA,2BAAA;EACA,YAAA;EACA,WAAA;EACA,aAAA;ACxHA;ADyHA;EACA,oDAAA;ACvHA;ADyHA;EACA,YAAA;ACvHA;;AAEA,iDAAiD", "file": "StandardViewCamera.vue", "sourcesContent": [`<template>\r
    <div class="video-wrapper">\r
        <video :id="videoElementId" autoplay playsinline v-show="!picture"></video>\r
        <canvas :id="canvasElementId" v-show="picture"></canvas>\r
        <div :class="{'visible-overlay': visibleOverlay}" class="overlay">\r
            <img :src="overlayMask" v-if="visibleMask">\r
        </div>\r
    </div>\r
</template>\r
\r
<script>\r
import { v4 as uuid4 } from 'uuid';\r
import Camera from 'easy-js-camera';\r
\r
export default {\r
    data() {\r
        return {\r
            camera: null,\r
            canvasElementId: \`canvas-\${uuid4().replace(/-/g, '')}\`,\r
            canvas: null,\r
            picture: null,\r
            switching: false,\r
            video: null,\r
            videoElementId: \`video-\${uuid4().replace(/-/g, '')}\`,\r
            visibleMask: false,\r
        }\r
    },\r
    methods: {\r
        snapAsBlob() {\r
            if(!this.camera) {\r
                console.error('Camera not found to take a picture');\r
                return;\r
            }            \r
            return new Promise(resolve => {\r
                this.camera.snapAsBlob()\r
                    .then(picture => {\r
                        this.picture = picture;\r
                        resolve(picture);\r
                    });\r
            });\r
        }, \r
        snapAsDataUrl() {\r
            if(!this.camera) {\r
                console.error('Camera not found to take a picture');\r
                return;\r
            }\r
            this.picture = this.camera.snapAsDataUrl();\r
            this.stop();\r
            return this.picture;\r
        },\r
        start() {\r
            if(this.camera) {\r
                this.picture = null;\r
                this.$emit('loading', true);\r
                this.camera.start()\r
                    .finally(() => this.$emit('loading', false));\r
                return;\r
            }\r
            this.video = document.getElementById(this.videoElementId);\r
            this.canvas = document.getElementById(this.canvasElementId);\r
            return new Promise(resolve => {\r
                Camera.tryInvokePermission(this.video, this.canvas)\r
                    .then(camera => {\r
                        this.camera = camera;\r
                        resolve(camera);\r
                    });\r
            });\r
        },\r
        stop() {\r
            if(!this.camera) {\r
                return;\r
            }\r
            this.camera.stop();\r
        },\r
        switchCamera(tryAgain = false) {\r
            if(this.switching && !tryAgain) return;\r
            if(!this.camera) {\r
                console.error('No camera found to switch...');\r
                return;\r
            }\r
            this.switching = true;\r
            return new Promise((resolve, reject) => {\r
                this.camera.switch(tryAgain)\r
                    .then(() => {\r
                        this.switching = false;\r
                        resolve();\r
                    })\r
                    .catch(() => {\r
                        if(!tryAgain) {\r
                            this.switchCamera(true);\r
                        } else {\r
                            this.switching = false;\r
                            reject();\r
                        }\r
                    })\r
            });\r
        },\r
        toggleMask() {\r
            this.visibleMask = !this.visibleMask;\r
        }\r
    },\r
    mounted() {\r
        if(this.startOnMounted) {\r
            this.$emit('loading', true);\r
            this.start()\r
                .then(camera => {\r
                    if(camera) {\r
                        camera.start();\r
                    }\r
                })\r
                .finally(this.$emit('loading', false));\r
        }\r
    },\r
    name: 'standard-view-camera',\r
    props: {\r
        overlayMask: String,\r
        startOnMounted: Boolean,\r
        visibleOverlay: Boolean\r
    }\r
}\r
<\/script>\r
<style lang="scss" scoped>\r
.video-wrapper {\r
    overflow: hidden;\r
    display: flex;\r
    align-items: center;\r
    position: relative;\r
    video {\r
        width: 100%;\r
        height: auto;\r
    }\r
    canvas {\r
        width: 100%;\r
        height: auto;\r
    }\r
    .overlay {\r
        position: absolute;\r
        left: 100%;\r
        transform: translateX(-50%);\r
        height: 100%;\r
        width: auto;\r
        display: flex;\r
        &.visible-overlay {\r
            box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, .8);\r
        }\r
        img {\r
            height: auto;\r
        }\r
    }\r
}\r
</style>`, ".video-wrapper {\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  position: relative;\n}\n.video-wrapper video {\n  width: 100%;\n  height: auto;\n}\n.video-wrapper canvas {\n  width: 100%;\n  height: auto;\n}\n.video-wrapper .overlay {\n  position: absolute;\n  left: 100%;\n  transform: translateX(-50%);\n  height: 100%;\n  width: auto;\n  display: flex;\n}\n.video-wrapper .overlay.visible-overlay {\n  box-shadow: 0px 0px 2000px 2000px rgba(0, 0, 0, 0.8);\n}\n.video-wrapper .overlay img {\n  height: auto;\n}\n\n/*# sourceMappingURL=StandardViewCamera.vue.map */"] }, media: void 0 });
};
var __vue_scope_id__$1 = "data-v-17eb9e5b";
var __vue_module_identifier__$1 = void 0;
var __vue_is_functional_template__$1 = false;
var __vue_component__$1 = normalizeComponent(
  { render: __vue_render__$1, staticRenderFns: __vue_staticRenderFns__$1 },
  __vue_inject_styles__$1,
  __vue_script__$1,
  __vue_scope_id__$1,
  __vue_is_functional_template__$1,
  __vue_module_identifier__$1,
  false,
  createInjector,
  void 0,
  void 0
);
var OutputType = {
  dataUrl: "dataUrl",
  blob: "blob"
};
var DeviceUtils = function DeviceUtils2() {
};
DeviceUtils.isTouchScreen = function isTouchScreen() {
  var touchDevice = navigator.maxTouchPoints > 0 || "ontouchstart" in document.documentElement;
  return touchDevice;
};
var script$2 = {
  components: {
    FullscreenViewCamera: __vue_component__,
    StandardViewCamera: __vue_component__$1
  },
  computed: {
    isTouchScreen: function isTouchScreen2() {
      return DeviceUtils.isTouchScreen();
    },
    multiDevice: function multiDevice2() {
      if (!this.refCameraComponent) {
        return false;
      }
      return this.refCameraComponent.camera.devices.length > 1;
    },
    refCameraComponent: function refCameraComponent() {
      return this.refFullscreenCamera ? this.refFullscreenCamera : this.refStandardCamera;
    },
    refFullscreenCamera: function refFullscreenCamera() {
      return this.$refs.fullscreenCameraRef;
    },
    refStandardCamera: function refStandardCamera() {
      return this.$refs.standardCameraRef;
    },
    viewFullscreen: function viewFullscreen() {
      return this.fullscreen || this.isTouchScreen && this.autoDetectMobile;
    },
    viewStandard: function viewStandard() {
      return !this.viewFullscreen;
    }
  },
  data: function data3() {
    return {
      camera: null
    };
  },
  methods: {
    close: function close2() {
      if (this.refFullscreenCamera) {
        this.refFullscreenCamera.close();
      } else {
        this.stop();
        this.$emit("close");
      }
    },
    snap: function snap() {
      var this$1 = this;
      if (this.output === OutputType.dataUrl) {
        var picture2 = this.refCameraComponent.snapAsDataUrl();
        this.stop();
        if (!this.mustApprove || !this.fullscreen) {
          this.$emit("input", picture2);
        }
      } else {
        this.$emit("loading", true);
        this.refCameraComponent.snapAsBlob().then(function(picture3) {
          this$1.stop();
          if (!this$1.mustApprove || !this$1.fullscreen) {
            this$1.$emit("input", picture3);
          }
        }).finally(function() {
          return this$1.$emit("loading", false);
        });
      }
    },
    start: function start3() {
      var this$1 = this;
      this.$emit("loading", true);
      this.refCameraComponent.start(function(camera) {
        if (camera) {
          this$1.$emit("loading", true);
          camera.start().finally(function() {
            return this$1.$emit("loading", false);
          });
        }
      });
    },
    stop: function stop3() {
      if (this.refCameraComponent === null) {
        return;
      }
      this.refCameraComponent.stop();
    },
    switchCamera: function switchCamera3() {
      var this$1 = this;
      if (!this.refCameraComponent) {
        return;
      }
      this.$emit("loading", true);
      this.refCameraComponent.switchCamera(false).finally(function() {
        return this$1.$emit("loading", false);
      });
    },
    toggleMask: function toggleMask2() {
      if (!this.refStandardCamera) {
        return;
      }
      this.refStandardCamera.toggleMask();
    }
  },
  name: "easy-camera",
  props: {
    autoDetectMobile: {
      type: Boolean,
      default: true
    },
    fullscreen: Boolean,
    fullscreenZIndex: {
      type: Number,
      default: 17
    },
    mustApprove: {
      type: Boolean,
      default: false
    },
    output: {
      type: String,
      default: OutputType.dataUrl
    },
    overlayMask: {
      type: String,
      default: null
    },
    startOnMounted: {
      type: Boolean,
      default: true
    },
    value: {},
    visibleOverlay: Boolean
  }
};
var __vue_script__$2 = script$2;
var __vue_render__$2 = function() {
  var this$1 = this;
  var _vm = this;
  var _h = _vm.$createElement;
  var _c = _vm._self._c || _h;
  return _vm.viewFullscreen ? _c("fullscreen-view-camera", {
    ref: "fullscreenCameraRef",
    attrs: {
      "fullscreen-z-index": _vm.fullscreenZIndex,
      "must-approve": _vm.mustApprove,
      "overlay-mask": _vm.overlayMask,
      "start-on-mounted": _vm.startOnMounted,
      "visible-overlay": _vm.visibleOverlay
    },
    on: {
      approve: function(picture2) {
        this$1.$emit("approve", picture2);
        this$1.$emit("input", picture2);
      },
      loading: function(loading) {
        this$1.$emit("loading", loading);
      },
      snap: _vm.snap,
      close: function($event) {
        return _vm.$emit("close");
      }
    },
    scopedSlots: _vm._u(
      [
        {
          key: "header",
          fn: function() {
            return [_vm._t("header")];
          },
          proxy: true
        }
      ],
      null,
      true
    )
  }) : _c("standard-view-camera", {
    ref: "standardCameraRef",
    attrs: {
      "overlay-mask": _vm.overlayMask,
      "start-on-mounted": _vm.startOnMounted,
      "visible-overlay": _vm.visibleOverlay
    },
    on: {
      loading: function(loading) {
        this$1.$emit("loading", true);
      }
    }
  });
};
var __vue_staticRenderFns__$2 = [];
__vue_render__$2._withStripped = true;
var __vue_inject_styles__$2 = void 0;
var __vue_scope_id__$2 = void 0;
var __vue_module_identifier__$2 = void 0;
var __vue_is_functional_template__$2 = false;
var __vue_component__$2 = normalizeComponent(
  { render: __vue_render__$2, staticRenderFns: __vue_staticRenderFns__$2 },
  __vue_inject_styles__$2,
  __vue_script__$2,
  __vue_scope_id__$2,
  __vue_is_functional_template__$2,
  __vue_module_identifier__$2,
  false,
  void 0,
  void 0,
  void 0
);
function install(Vue) {
  if (install.installed) {
    return;
  }
  install.installed = true;
  Vue.component("v-easy-camera", __vue_component__$2);
}
var plugin = {
  install
};
var GlobalVue = null;
if (typeof window !== "undefined") {
  GlobalVue = window.Vue;
} else if (typeof global !== "undefined") {
  GlobalVue = global.Vue;
}
if (GlobalVue) {
  GlobalVue.use(plugin);
}
var EasyCamera_esm_default = __vue_component__$2;

// dep:easy-vue-camera
var easy_vue_camera_default = EasyCamera_esm_default;
export {
  DeviceUtils,
  OutputType,
  easy_vue_camera_default as default,
  install
};
//# sourceMappingURL=easy-vue-camera.js.map
